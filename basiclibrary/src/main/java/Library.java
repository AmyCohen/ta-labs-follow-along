import java.util.*;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    public static void main(String[] args) {
        // Daily average temperatures for Seattle, October 1-28 2017
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };

//        System.out.println(analyzingWeatherData(weeklyMonthTemperatures));
//        System.out.println("Combined Data " + coalaceData(weeklyMonthTemperatures));

        ArrayList<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");

        String winner = tally(votes);
        System.out.println(winner + " received the most votes!");
    }

    //All jumbled together. A better way would be to break each part out into a separate function
    public static String analyzingWeatherData (int[][] weatherdata) {

        HashSet<Integer> data = new HashSet<>();
        StringBuffer buffer = new StringBuffer();
        int min = weatherdata[0][0];
        int max = weatherdata[0][0];

        for (int row = 0; row < weatherdata.length; row++) {
            for (int col = 0; col < weatherdata[row].length; col++) {
                int currentData = weatherdata[row][col];
                if (!data.contains(currentData)) {
                    data.add(currentData);
                }
                if (currentData < min) {
                    min = currentData;
                }
                if (currentData > max) {
                    max = currentData;
                }
            }
        }
        for (int i = min; i < max; i++) {
            if (!data.contains(i)) {
                buffer.append("Never saw temperature: " + i + "\n");
            }
        }
        return "High: " + max + "\n" +
                "Low: " + min + "\n" +
                buffer;

    }

    //Finding the minimum tempature
    public static int minTemp (int[][] weatherData) {
        int min = weatherData[0][0];
        for (int row = 0; row < weatherData.length; row++) {
            for (int col = 0; col < weatherData[row].length; col++) {
                int currentData = weatherData[row][col];
                if (currentData < min) {
                    min = currentData;
                }
            }

        }
        return min;
    }

    //Finding the maximum tempature
    public static int maxTemp (int[][] weatherData) {
        int max = weatherData[0][0];
        for (int row = 0; row < weatherData.length; row++) {
            for (int col = 0; col < weatherData[row].length; col++) {
                int currentData = weatherData[row][col];
                if (currentData > max) {
                    max = currentData;
                }
            }

        }
        return max;
    }
    //Finding temperatures not seen during the month
    public static String tempsNotSeen (int min, int max, int[][] weatherData) {
        HashSet<Integer> data = new HashSet<>();
        StringBuffer buffer = new StringBuffer();

        for (int row = 0; row < weatherData.length; row++) {
            for (int col = 0; col < weatherData[row].length; col++) {
                int currentData = weatherData[row][col];
                if (!data.contains(currentData)) {
                    data.add(currentData);
                }

            }
        }
        for (int i = min; i < max; i++) {
            if (!data.contains(i)) {
                buffer.append("Never saw temperature: " + i + "\n");
            }
        }
        return buffer.toString();
    }

    //Running all methods through another method to get the printout indicated
    public static String coalaceData(int[][] weatherData) {
        int high = maxTemp(weatherData);
        int low = minTemp(weatherData);
        return "High: " + high + "\n" +
                "Low: " + low + "\n" +
                tempsNotSeen(low, high, weatherData);
    }

    public static String tally(ArrayList<String> votes) {
        HashMap<String, Integer> scoreCard = new HashMap<>();
        String winner = "";
        int highestVotes = 0;

        for (int i = 0; i < votes.size(); i++) {
            String key = votes.get(i);
            if (!scoreCard.containsKey(key)) {
                scoreCard.put(key, 0);
            } else {
                int count = scoreCard.get(key);
                count++;
                scoreCard.put(votes.get(i), count);
            }
        }

        for (String key: scoreCard.keySet()) {
            if (scoreCard.get(key) > highestVotes) {
                highestVotes = scoreCard.get(key);
                winner = key;
            }
        }
        return winner;
    }
}
